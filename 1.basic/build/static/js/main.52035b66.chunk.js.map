{"version":3,"sources":["index.js"],"names":["element","React","createElement","className","style","color","console","log","ReactDOM","render","document","getElementById"],"mappings":"yIAAA,2CAqBIA,EAAUC,IAAMC,cAAc,KAAM,CACtCC,UAAW,QACXC,MAAO,CACLC,MAAO,QAERJ,IAAMC,cAAc,OAAQ,KAAM,SAAU,SAC/CI,QAAQC,IAAIP,GACZQ,IAASC,OACPT,EACAU,SAASC,eAAe,W","file":"static/js/main.52035b66.chunk.js","sourcesContent":["import React from 'react';//react的核心库\nimport ReactDOM from 'react-dom';//react的dom渲染库\n//jsx语法\n/* ReactDOM.render(\n  <h1>hello</h1>,\n  document.getElementById('root')\n); */\n//createElement的返回值是React元素\n//let element = React.createElement(\"h1\", null, \"Hello\");\n//console.log(JSON.stringify(element,null,2));\n//会把你这个React元素,也就是常说的虚拟DOM转换成真实DOM并插入到页面中root容器中去\n/* let element = (\n  <h1 className=\"title\" style={{color:'red'}}>\n    <span>hello</span>world\n  </h1>\n) */\n/**\n * 参数1 标签的类型 h1 span div\n * 参数2 属性的JS对象\n * 参数3往后的都是儿子们\n */\nlet element = React.createElement(\"h1\", {\n  className: \"title\",\n  style: {\n    color: 'red'\n  }\n}, React.createElement(\"span\", null, \"hello\"), \"world\");\nconsole.log(element);\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n/**\n就是一个普通的JS对象,就是虚拟DOM\n{\n  \"type\": \"h1\",\n  \"props\": {\n    \"children\": \"Hello\"\n  }\n}\n */\n\n\n/**\n * 你以前在写JS\n * jsx很像html,更像js,而非html  里面的写法更多的是JS写法   document.getElementById('root').className='title'\n * \n * <h1>hello</h1> 非常直观\n *  createElement不是那么直观\n * JSX在webpack打包的时候,会走babel-loader,babel-loader会把jsx转义成createElement\n * 真正浏览器跑的时候就是createElement,在浏览器里运行的时候,才会执行createElement方法得到虚拟DOM\n * React元素=虚拟DOM\n */"],"sourceRoot":""}